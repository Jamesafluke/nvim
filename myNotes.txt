pwd

Lua, yaml, bicep, terraform lsp!

Additional toys to check out:
Comment.nvim - Eary Shortcut for commenting lines
nvim-autopairs - Automatically pair for brackets and quotes
horizontal mouse scroll
Git functionality. I don't want to have to quit nvim to Git.
Change the background or text color based on what file it is. 
    I might want my daily notes to be a specific color so I can easily see alt tab.
Whaat if I change background color based on mode?




Working list:
DONE Vertical indent lines.
DONE Add M to cycling / results.
DONE Harpooooooooon!!
DONE File explorer
DONE Brainless copy paste
DONE Git stuff?
DONE Terminal!
DONE Relative line numbers
DONE Get a better filestructure.
DONE Remap keys in nvimTree
DONE Figure out Telescope.
DONE Remap capital L (To be same as I) since I need I as left.
Format on write?
Autosave?
DONE Open two files two tabs at the same time
DONE Terminal in the bottom
DONE NEED to be able to make changes in the file tree. Create, mkdir, delete, rename.
DONE Nah, don't need this. Tree sitter DUN DUN DUN
DONE Harpoon looks awesome.
DONE YAY I FIXED THE DUMB MODIFIABLE
I need a way to bounce into a directory fast. For example, jump to Code fast from nconf. Or to a directory in Code.
I read that Telescope can show files in a directory.
    Mine is confusing - I can't tell where it's able to search.
DONE vim-illuminate - highlights all instances of word under cursor

----------------

Tabs!
:tabe - open new tab.
:tabe file.txt
gt 
gT
:tabc - close


Searching Kung Foo
* to search word under cursor.
If you want to search again using the previous search pattern, // is your friend.
:s/pattern/replace/g - Substitute “pattern” by “replace” on the current line.
:%s/pattern/replace/g - Substitute “pattern” by “replace” in the current file.


G - jump to line

NeoTree
nvim .
:NvimTreeOpen
neotree
ctrl+w+h
ctrl+w+l

P - paste before cursor
p - paste after cursor

d - delete text
c - delete text and insert mode

yy - yank line of text

viw - select a word

cw - delete a word, enter Insert

Remember Ctrl D and Ctrl U

:so - source a file!

In vim # means the alternate file


=G - Format!



https://youtu.be/6mxWayq-s9I?t=540




Some Lua Notes:
config = functino() block is a Lua function used in Neovim's plugin configuration,
particlarly when managing plugins with a plugin manager.
It defines a setup function that runs after the plugin is loaded, allowing you to configure behavior
- Set up key mappings.
- plugin-specific options
- Initialization for the plu5gin to work properly


require("someplugin")
    Loades the module named someplugin
    typically, someplugin corresponds to the name of the plugin or its Lua entry point

Plugin managers like Lazy support an opts field, which automatically passes the options to a plugin's setup() function if the plugin exporer one.
    This eliminates the need for a confog block when the config is straghtforward.
    The plugin manager detects the opts field ant automatically calls
        require("toggleterm").setup(opts)

Typically, config = function() is only needed for custom logic or complex stuff including custom commands, set keymaps, or talk to other plugins.

Best practices:
    Use opts when possible.(Which I should because Lazy supports it.)
    If the plugin's setup can be handled with a single setup() call, prefer opts for simplicity..
Use config (fonfig = function()) for logic, keybindings, or talking to other plugins.

Some plugins require setup() to be called in a config block, while other work fine with opts. See plugin's docs.




